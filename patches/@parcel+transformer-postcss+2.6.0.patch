diff --git a/node_modules/@parcel/transformer-postcss/lib/PostCSSTransformer.js b/node_modules/@parcel/transformer-postcss/lib/PostCSSTransformer.js
index 9a49f5a..f1f33b3 100644
--- a/node_modules/@parcel/transformer-postcss/lib/PostCSSTransformer.js
+++ b/node_modules/@parcel/transformer-postcss/lib/PostCSSTransformer.js
@@ -129,10 +129,10 @@ var _default = new (_plugin().Transformer)({
     const postcss = await loadPostcss(options, asset.filePath);
     return {
       type: 'postcss',
-      version: '8.2.1',
+      version: '7.0.0',
       program: postcss.parse(await asset.getCode(), {
         from: asset.filePath
-      }).toJSON()
+      })
     };
   },
 
@@ -165,7 +165,7 @@ var _default = new (_plugin().Transformer)({
 
     const postcss = await loadPostcss(options, asset.filePath);
     let ast = (0, _nullthrows().default)(await asset.getAST());
-    let program = postcss.fromJSON(ast.program);
+    let program = ast.program;
     let plugins = [...config.hydrated.plugins];
     let cssModules = null;
 
@@ -242,7 +242,7 @@ var _default = new (_plugin().Transformer)({
 
 
       let postcssModules = await options.packageManager.require('postcss-modules', asset.filePath, {
-        range: '^4.3.0',
+        range: '^3.2.2',
         saveDev: true,
         shouldAutoInstall: options.shouldAutoInstall
       });
@@ -287,8 +287,8 @@ var _default = new (_plugin().Transformer)({
     } = await postcss(plugins).process(program, config.hydrated);
     asset.setAST({
       type: 'postcss',
-      version: '8.2.1',
-      program: root.toJSON()
+      version: '7.0.0',
+      program: root
     });
 
     for (let msg of messages) {
@@ -326,16 +326,16 @@ var _default = new (_plugin().Transformer)({
         `;
       } else {
         code = cssModulesList.map( // This syntax enables shaking the invidual statements, so that unused classes don't even exist in JS.
-        ([className, classNameHashed]) => `module.exports[${JSON.stringify(className)}] = ${JSON.stringify(classNameHashed)};`).join('\n');
+          ([className, classNameHashed]) => `module.exports[${JSON.stringify(className)}] = ${JSON.stringify(classNameHashed)};`).join('\n');
       }
 
-      asset.symbols.ensure();
+      // asset.symbols.ensure();
 
-      for (let [k, v] of cssModulesList) {
-        asset.symbols.set(k, v);
-      }
+      // for (let [k, v] of cssModulesList) {
+      //   asset.symbols.set(k, v);
+      // }
 
-      asset.symbols.set('default', 'default');
+      // asset.symbols.set('default', 'default');
       assets.push({
         type: 'js',
         content: code
@@ -352,7 +352,7 @@ var _default = new (_plugin().Transformer)({
   }) {
     const postcss = await loadPostcss(options, asset.filePath);
     let code = '';
-    postcss.stringify(postcss.fromJSON(ast.program), c => {
+    postcss.stringify(ast.program, c => {
       code += c;
     });
     return {
@@ -387,7 +387,7 @@ async function createLoader(asset, resolve, options) {
       let {
         exportTokens
       } = await this.core.load(source, rootRelativePath, undefined, // $FlowFixMe[method-unbinding]
-      this.fetch.bind(this));
+        this.fetch.bind(this));
       return exportTokens;
     }
 
diff --git a/node_modules/@parcel/transformer-postcss/lib/constants.js b/node_modules/@parcel/transformer-postcss/lib/constants.js
index a16ee4c..995a367 100644
--- a/node_modules/@parcel/transformer-postcss/lib/constants.js
+++ b/node_modules/@parcel/transformer-postcss/lib/constants.js
@@ -4,5 +4,5 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.POSTCSS_RANGE = void 0;
-const POSTCSS_RANGE = '^8.2.1';
+const POSTCSS_RANGE = '^7.0.0';
 exports.POSTCSS_RANGE = POSTCSS_RANGE;
\ No newline at end of file
